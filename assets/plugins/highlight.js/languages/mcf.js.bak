/*! `mcfunction` for Highlight.js 11.9.0 */
  (function(){
    var hljsGrammar = (function () {
  'use strict';

  /*
   * Language: mcf, mcfunction
   * Description: Minecraft Function
   * Contributors: XiaozhiSans <xiaozhisans@qq.com>
   * Category: common, function, scripting, minecraft
   * Website: 
  */

  function mcf(hljs) {
    const regex = hljs.regex;
    const MAIN_KEYWORDS = [
      "camerashake",
      "fog",
      "music",
      "playanimation",
      "playsound",
      "stopsound",
      "particle",
      "structure",
      "camera",
      "clearspawnpoint",
      "spawnpoint",
      "setworldspawn",
      "xp",
      "gamemode",
      "kick",
      "ride",
      "me",
      "tell",
      "tellraw",
      "title",
      "titleraw",
      "say",
      "msg",
      "setblock",
      "fill",
      "clone",
      "replaceitem",
      "give",
      "clear",
      "enchant",
      "weather",
      "difficulty",
      "gamerule",
      "kill",
      "damage",
      "effect",
      "testfor",
      "testforblock",
      "testforblocks",
      "scoreboard",
      "execute",
      "tp",
      "teleport",
      "summon",
      "spreadplayers",
      "function",
      "event",
      "tag",
      "scoreboard",
      "gametest",
      "schedule"
    ];
    const LITERALS = {
      className: 'literal',
      begin: /\btrue|false\b/
    };
    const TYPES = {
      className: 'type',
      variants: [
        {begin: /(@|~)/, end: /[0-9a-z]+/}
      ]
    }
    const KEYWORDS = {
      className: 'keyword',
      keyword: MAIN_KEYWORDS,
      literal: LITERALS,
      type: TYPES
      // built_in: BUILT_INS
    };
    const NUMBERS = {
      className: 'number',
      relevance: 0,
      variants: [
        { begin: /((-|\+)?\d+)(\.\d+)?/ }
      ]
    };
    const COMMENTS = hljs.COMMENT();
    COMMENTS.variants = [
      {
        begin: /#/,
        end: /$/
      }
    ];
    const VARIABLES = {
      className: 'variable',
      variants: [
        { begin: /\ [a-zA-Z]+/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    };
    const STRINGS = {
      className: "string",
      contains: [ hljs.BACKSLASH_ESCAPE ],
      variants: [
        {
          begin: '"',
          end: '"'
        }
      ]
    };
    const ARRAY = {
      begin: /\[/,
      end: /\]/,
      contains: [
        COMMENTS,
        KEYWORDS,
        VARIABLES,
        STRINGS,
        NUMBERS,
        'self'
      ],
      relevance: 0
    };

    const BARE_KEY = /[A-Za-z0-9_-]+/;
    const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
    const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
    const ANY_KEY = regex.either(
      BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE
    );
    const DOTTED_KEY = regex.concat(
      ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*',
      regex.lookahead(/\s*=\s*[^#\s]/)
    );

    return {
      name: 'mcfunction',
      aliases: [ 'XiaozhiSans' ],
      keywords: KEYWORDS,
      case_insensitive: true,
      illegal: /\S/,
      contains: [
        COMMENTS,
        {
          className: 'section',
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: DOTTED_KEY,
          className: 'attr',
          starts: {
            end: /$/,
            contains: [
              COMMENTS,
              ARRAY,
              KEYWORDS,
              VARIABLES,
              STRINGS,
              NUMBERS
            ]
          }
        }
      ]
    };
  }

  return mcf;

})();

    hljs.registerLanguage('mcf', hljsGrammar);
  })();